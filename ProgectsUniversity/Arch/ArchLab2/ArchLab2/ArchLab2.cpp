#include <iostream>
#include <omp.h>
#include <time.h>
#include <math.h>
#include <string>
#include <stdio.h>
using namespace std;

#define COUNT_MLTPLCTNS 10000000

int main()
{
	setlocale(LC_ALL, "Russian");
	//------------------------------------------------------------------------------------------
	//---------Задание 1------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------
	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 1-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");

	const int numThreads = 2;
	omp_set_num_threads(numThreads);

	const int N = 100000000000;

	double time = omp_get_wtime();

	for (int i = 0; i < N; i++) {
		double result = 10 * 10;
	}


	printf("Single-threaded execution time - %lf\n", omp_get_wtime() - time);


	time = omp_get_wtime();

	#pragma omp parallel
		{
			for (int i = 0; i < N / numThreads; i++) {
				double result = 10 * 10;
			}
		}

	printf("Multithreaded  execution time - %lf\n", omp_get_wtime() - time);

	//------------------------------------------------------------------------------------------
	//---------Задание 2------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------

	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 2-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");
	

	omp_set_dynamic(1);
	double time1 = omp_get_wtime();

	#pragma omp parallel
		{
		}

	double time2 = omp_get_wtime();
	printf("Time - %lf\n", time2 - time1);
	//------------------------------------------------------------------------------------------
	//---------Задание 3------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------

	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 3-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");
	
	printf("Without nowait\n");
	#pragma omp parallel num_threads(3)
		{
	#pragma omp single
			{
				printf("Begin\nThread #%d\n", omp_get_thread_num());
			}
	#pragma omp single
			{
				printf("One thread\nThread #%d\n", omp_get_thread_num());
			}
	#pragma omp single
			{
				printf("End\nThread #%d\n\n", omp_get_thread_num());
			}
	}
	printf("With nowait\n");
	#pragma omp parallel num_threads(3)
		{
	#pragma omp single nowait
			{
				printf("Begin\nThread #%d\n", omp_get_thread_num());
			}
	#pragma omp single nowait
			{
				printf("One thread\nThread #%d\n", omp_get_thread_num());
			}
	#pragma omp single nowait
			{
				printf("End\nThread #%d\n", omp_get_thread_num());
			}
	}
	//------------------------------------------------------------------------------------------
	//---------Задание 4------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------

	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 4-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");

	#pragma omp parallel num_threads(3)
		{
			printf("Begin, thread #%d\n", omp_get_thread_num());
			#pragma omp master
				{
					printf("Main thread, thread #%d\n", omp_get_thread_num());
					printf("Main thread, thread #%d\n", omp_get_thread_num());
				}
			printf("Middle, thread #%d\n", omp_get_thread_num());
			#pragma omp master
				{
					printf("Main thread, thread #%d\n", omp_get_thread_num());
					printf("Main thread, thread #%d\n", omp_get_thread_num());
				}
			printf("End, thread #%d\n", omp_get_thread_num());
		}
	//------------------------------------------------------------------------------------------
	//---------Задание 5------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------

	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 5-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");

	int n = 10;
	int ThreadsNum = omp_get_thread_num();
	printf("Sequential region, thread #%d, n = %d\n", omp_get_thread_num(), n);

	#pragma omp parallel num_threads(2) private(n)
		{
			n = 10;
			printf("Parallel region, thread #%d, n = %d\n", omp_get_thread_num(), n);

			n = omp_get_thread_num();

			printf("Parallel region, thread #%d, n = %d\n", omp_get_thread_num(), n);

		}

	printf("Sequential region, thread #%d, n = %d\n", omp_get_thread_num(), n);
	//------------------------------------------------------------------------------------------
	//---------Задание 6------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------

	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 6-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");

	int m[5] = { 0,0,0,0,0 };

	for (int i = 0; i < 5; i++) {
		printf("%d ", m[i]);
	}
	printf("\n");

	#pragma omp parallel num_threads(2) shared(m)
		{
			for (int i = 0; i < 5; i++) {
				if (omp_get_thread_num() == i) {
					m[i] = 1;
				}
			}
		}

	for (int i = 0; i < 5; i++) {
		printf("%d ", m[i]);
	}
	printf("\n");
	//------------------------------------------------------------------------------------------
	//---------Задание 7------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------

	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 7-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");

	int num_threads = 0;

	#pragma omp parallel reduction(+:num_threads)
		{
			num_threads++;
			printf("Thread #%d, num_threads = %d\n", omp_get_thread_num(), num_threads);
		}

	printf("num_threads = %d\n", num_threads);
	//------------------------------------------------------------------------------------------
	//---------Задание 8------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------

	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 8-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");

	int sum = 0;

	#pragma omp parallel num_threads(4) reduction(+:sum)
		{
			sum += omp_get_thread_num();
			printf("Thread #%d, sum = %d\n", omp_get_thread_num(), sum);
		}

	printf("sum = %d\n", sum);
	//------------------------------------------------------------------------------------------

}
