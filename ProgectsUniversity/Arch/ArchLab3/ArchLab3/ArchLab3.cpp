#include <iostream>
#include <omp.h>
#include <time.h>
#include <math.h>
#include <string>
#include <stdio.h>
using namespace std;

void print_array(int arr[], int n) {
	for (int i = 0; i < n; i++) {
		printf("%d ", arr[i]);
	}
	printf("\n");
}

int main()
{
	setlocale(LC_ALL, "Russian");
	srand(time(NULL));
	//------------------------------------------------------------------------------------------
	//---------Задание 1------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------
	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 1-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");

	const int N = 5;

	int A[N];
	int B[N];
	int C[N];

	for (int i = 0; i < N; i++) {
		A[i] = rand() % 100;
		B[i] = rand() % 100;
	}

	printf("A: ");
	print_array(A, N);
	printf("B: ");
	print_array(B, N);

	int i;
	#pragma omp parallel for shared(C) private(i)
		for (i = 0; i < N; i++) {
			C[i] = A[i] + B[i];
			printf("Thread #%d, C[%d] = %d\n", omp_get_thread_num(), i, C[i]);
		}

	printf("C: ");
	print_array(C, N);
	//------------------------------------------------------------------------------------------
	//---------Задание 2------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------

	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 2-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");


	const int N1 = 100;

	int A1[N1];
	int B1[N1];
	int sum = 0;

	for (int i = 0; i < N1; i++) {
		A1[i] = rand() % 100;
		B1[i] = rand() % 100;
	}

#pragma omp parallel for private(i) reduction(+:sum)
	for (int i = 0; i < N1; i++) {
		sum += A1[i] * B1[i];
	}

	printf("sum = %d\n", sum);
	//------------------------------------------------------------------------------------------
	//---------Задание 3------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------

	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 3-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");

	int B3[N][N];
	int A3[N];
	int C3[N];

	for (int i = 0; i < N; i++) {
		A3[i] = rand() % 100;
		for (int j = 0; j < N; j++) {
			B3[i][j] = rand() % 100;
		}
	}

	printf("B: ");
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			printf("B[%d][%d] = %d ", i, j, B3[i][j]);
		}
		printf("\n");
	}
	printf("A: ");
	print_array(A3, N);

	int i1;
	int j;
	#pragma omp parallel for shared(C) private(i1,j)
		for (j = 0; j < N; j++) {
			for (i1 = 0; i1 < N; i1++) {
				C3[j] += A3[i1] * B3[i1][j];
			}
			printf("Thread #%d, C[%d] = %d\n", omp_get_thread_num(), j, C3[j]);
		}

	printf("C: ");
	print_array(C3, N);
	//------------------------------------------------------------------------------------------
	//---------Задание 4------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------

	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 4-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");

	int i3;
	#pragma omp num_theads(9) parallel for ordered private(i3)
		for (i3 = 1; i3 <= 9; i3++) {
			for (int j = 1; j <= 9; j++) {
				printf("%d*%d=%d ", i3, j, i3 * j);
			}
			printf("\n");
		}

	//------------------------------------------------------------------------------------------

}
