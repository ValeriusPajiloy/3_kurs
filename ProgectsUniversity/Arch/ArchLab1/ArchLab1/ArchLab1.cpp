#include <iostream>
#include <omp.h>
#include <time.h>
#include <math.h>
#include <string>

using namespace std;
int main()
{
	setlocale(LC_ALL, "Russian");

//------------------------------------------------------------------------------------------
//----Задание на Паре-----------------------------------------------------------------------
//------------------------------------------------------------------------------------------
	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание на Паре-----------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");
	int NumOfThreads;
	
#pragma omp parallel
	{
		int ThreadId;
		ThreadId = omp_get_thread_num();
		NumOfThreads = omp_get_num_threads();
		printf("Hello, I am thread number % d from % d\n", ThreadId, NumOfThreads);

	}

	printf("\n\nКол-во потоков = %d\n", NumOfThreads);




	long int N = 100000000;

	clock_t t0 = clock();
	for (long int i = 0; i < N; i++) {
		double j = cos(i);
	}
	clock_t t1 = clock() - t0;

	printf("Время выполнения без OMP - %d \n\n", t1);




	clock_t t2 = clock(); 
	#pragma omp parallel
		{
			for (long int i = 0; i < N/8; i++) {
				double j = cos(i);
			}
		}

	clock_t t3 = clock() - t2;

	printf("Время выполнения с OMP - %d \n\n", t3);

	printf("Разница %lf \n\n", (double)t1/(double)t3);

	

//------------------------------------------------------------------------------------------
//---------Задание 1------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 1-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");

	printf("\r\nПоследовательная область 1\r\n");
	#pragma omp parallel
		{
			printf("Параллельная область\r\n");
		}
	printf("Последовательная область 2\r\n");

//------------------------------------------------------------------------------------------
//---------Задание 2------------------------------------------------------------------------
//------------------------------------------------------------------------------------------

	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 2-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");

	#pragma omp parallel
		{
			int ThreadId;
			ThreadId = omp_get_thread_num();
			NumOfThreads = omp_get_num_threads();
			printf("Поток номер % d\n", ThreadId);

		}

		printf("\n\nКол-во потоков = %d\n", NumOfThreads);



//------------------------------------------------------------------------------------------
//---------Задание 3------------------------------------------------------------------------
//------------------------------------------------------------------------------------------

	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 3-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");

	#pragma omp parallel
		{
			printf("Parallel region 1\n");
			printf("Number of threads - %d\n", omp_get_num_threads());
		}

	#pragma omp parallel num_threads(3)
		{
			printf("Parallel region 2\n");
			printf("Number of threads - %d\n", omp_get_num_threads());
		}

		omp_set_num_threads(4);
	#pragma omp parallel
		{
			printf("Parallel region 3\n");
			printf("Number of threads - %d\n", omp_get_num_threads());
		}

//------------------------------------------------------------------------------------------
//---------Задание 4------------------------------------------------------------------------
//------------------------------------------------------------------------------------------

	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 4-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");

	omp_set_dynamic(0);

	#pragma omp parallel num_threads(128)
		{
			if (omp_get_thread_num() == 0) {
				printf("Number of threads - %d\n", omp_get_num_threads());
			}
		}

	omp_set_dynamic(1);

	#pragma omp parallel num_threads(128)
		{
			if (omp_get_thread_num() == 0) {
				printf("Number of threads - %d\n", omp_get_num_threads());
			}
		}

//------------------------------------------------------------------------------------------
//---------Задание 5------------------------------------------------------------------------
//------------------------------------------------------------------------------------------

	printf("------------------------------------------------------------------------------------------\n");
	printf("----Задание 5-----------------------------------------------------------------------------\n");
	printf("------------------------------------------------------------------------------------------\n");

	printf("Введите аргумент: ");
	string argv;
	cin >> argv;
	if (strcmp(argv.c_str(), "parallel") == 0) {
		printf("Programm works in parallel mode\n");
	#pragma omp parallel
			{
			}
	}
	if (strcmp(argv.c_str(), "serial") == 0) {
		printf("Programm works in sequential mode\n");
	}
//------------------------------------------------------------------------------------------

}
